<template>
  <div :class="'pageBody' + (pageWait ? ' wait' : '')" id="clientshipment">
    <div class="layout-page-tool">
      <Button type="warning" @click="upload">
        <Icon type="md-add" /> 导出
      </Button>
    </div>
    <div class="layout-page-content">
      <Table
        border
        stripe
        :loading="tableLoading"
        :height="table.height"
        :columns="table.columns"
        :data="tableData"
        :highlight-row="true"
      >
      </Table>
    </div>
    <div class="layout-page-page">
      <Page
        :total="total"
        :current="current"
        :page-size="page_size"
        :page-size-opts="page.page_sizepts"
        @on-change="page_change"
        @on-page-size-change="page_size_change"
        show-sizer
        show-elevator
        show-total
        size="small"
      >
      </Page>
    </div>
    <popup-upload ref="popupUpload" :option="option" v-on:refresh="refreshTable"></popup-upload>
  </div>
</template>
<script>
import popupUpload from "components/situation/popup-upload";
import api from "controller/api/api.js";
import { getTableHeight } from "tool/tool.js";
export default {
  name: "clientshipment",
  data() {
    return {
      delModel: {},
      table: {
        height: 500,
        columns: [
          { type: "index", width: 50, align: "center" },
          { title: "客户名称", key: "CRMNAME", align: "center" },
          { title: "发货次数", key: "DELIVERNUM", align: "center" }
        ]
      },
      page: {
        page_sizepts: [50, 100, 200]
      },
       option: {
        upLoadUrl: api.statisticalManagement.clientshipment.fileUpLoad.url,
        pageWait: "clientshipment/changePageWait",
        text: []
      }
    };
  },
  components: {
    popupUpload
  },
  computed: {
    tableData() {
      return this.$store.state.clientshipment.tableData;
    },
    tableLoading() {
      return this.$store.state.clientshipment.tableLoading;
    },
    current() {
      return this.$store.state.clientshipment.current;
    },
    page_size() {
      return this.$store.state.clientshipment.page_size;
    },
    total() {
      return this.$store.state.clientshipment.total;
    },
    pageWait() {
      return this.$store.state.clientshipment.pageWait;
    }
  },
  activated() {
    if (this.$store.getters["pageTab/pageInTab"]("clientshipment")) {
      this.refreshTable();
      this.$store.dispatch({ type: "clientshipment/refreshData" });
    }
  },
  mounted() {
    this.table.height = getTableHeight();
  },
  methods: {
    page_change(newPage) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "clientshipment/refreshData",
          current: newPage
        });
      }
    },
    page_size_change(newPageSiae) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "clientshipment/refreshData",
          current: 1,
          page_size: newPageSiae
        });
      }
    },
    upload() {
      this.$refs.popupUpload.open();
    },
    pollings() {
      this.visible = false;
    },
    reset() {
      this.searchData = {};
    },
    onCancel() {
      this.visible = !this.visible;
    },
    refreshTable() {
      this.$store.dispatch({ type: "clientshipment/refreshData" });
    }
  }
};
</script>

<style>
</style>
