<template>
  <div class="poptipBox">
    <Poptip trigger="hover" placement="bottom-end" @mouseover.native="showDate" @mouseout.native="clearDate">
      <div>
        <img src="../../../assets/images/user.jpg" />
        <Icon type="ios-arrow-down" />
      </div>
      <div slot="content" class="userDetail">
        <table cellspacing="0">
          <tr>
            <td>欢迎 {{userInfo.name}} 登录</td>
          </tr>
          <tr>
            <td>当前时间 : {{time}}</td>
          </tr>
          <tr>
            <td colspan="2">
              <Button tpye="primary" @click.native="open">修改密码</Button>
              <Button tpye="primary" @click.native="exit">退出登录</Button>
            </td>
          </tr>
        </table>
      </div>
    </Poptip>
    <Modal v-model="show" :mask-closable="!1" draggable :transfer="!1" width="300">
      <p slot="header" style="color:#f60;">
        <Icon type="information-circled"></Icon>
        <span>修改密码</span>
      </p>
      <Form ref="possword" :model="possword" :rules="ruleCustom" :label-width="80">
        <FormItem label="新密码" prop="newPassword">
          <i-input type="password" v-model="possword.newPassword"></i-input>
        </FormItem>
        <FormItem label="确认密码" prop="passwdCheck">
          <i-input type="password" v-model="possword.passwdCheck"></i-input>
        </FormItem>
      </Form>
      <div slot="footer">
        <Button type="success" @click="onOk">确认</Button>
        <Button type="error" @click="onCancel">取消</Button>
      </div>
    </Modal>
  </div>
</template>

<script>
import { eltValidators } from "tool/eltValidators.js";
export default {
  data() {
    const validatePass = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("请输入密码"));
      } else {
        if (this.possword.passwdCheck !== "") {
          // 对第二个密码框单独验证
          this.$refs.possword.validateField("passwdCheck");
        }
        callback();
      }
    };
    const validatePassCheck = (rule, value, callback) => {
      if (value === "") {
        callback(new Error("再次输入密码"));
      } else if (value !== this.possword.newPassword) {
        callback(new Error("两次密码输入不同!"));
      } else {
        callback();
      }
    };
    return {
      show: false,
      possword: {
        newPassword: "",
        passwdCheck: ""
      },
      time: new Date().toLocaleString(),
      time_s: 0,
      ruleCustom: {
        // newPassword: [{ required: true, validator: validatePass }],
        // passwdCheck: [{ required: true, validator: validatePassCheck }]
        newPassword: [
          { required: true, message: "请输入密码！" },
          {
            validator: eltValidators, //所有自定义验证都走这个方法
            message: "请输入正确格式的密码！", //基本的提示信息
            notEmpty: true, //是否必填，这个和上边定义的 required: true 必须同步， false 的话可以不写
            rules: [
              //全部的验证过则
              { name: "number", message: "", info: "" }, //要求数字型、没设置这条规则的提示信息、附带信息（数字型用不到）
              { name: "rangeLength", message: "", info: [6,12] }
            ]
          }
        ],
        passwdCheck: [
          { required: true, message: "请再输入一次！" },
          {
            validator: eltValidators, //所有自定义验证都走这个方法
            message: "请输入正确格式的密码！", //基本的提示信息
            notEmpty: true, //是否必填，这个和上边定义的 required: true 必须同步， false 的话可以不写
            rules: [
              //全部的验证过则
              { name: "number", message: "", info: "" }, //要求数字型、没设置这条规则的提示信息、附带信息（数字型用不到）
              { name: "rangeLength", message: "", info: [6,12] }
            ]
          }
        ]
      }
    };
  },
  props: {

  },
  created() {

  },
  computed: {
    userInfo() {
      return this.$store.state.login.userInfo;
    }
  },
  mounted() {

  },
  methods: {
    showDate() {
      this.time = new Date().toLocaleString();
      this.time_s = setInterval(() => {
        this.time = new Date().toLocaleString();
      },1000);
    },
    clearDate() {
      clearInterval(this.time_s);
    },
    exit() {
      this.$store.dispatch("login/loginOut");
    },
    open(id) {
      this.show = true;
      this.$refs["possword"].resetFields();
    },
    onOk() {
      this.$refs["possword"].validate(valid => {
        if (valid) {
          // this.$store.dispatch({
          //   type: ( this.isNew ? 'menu/saveNew' : 'menu/saveEdit' ),
          //   id: this.id,
          //   name: this.byIdData.name,
          //   describe: this.byIdData.describe,
          //   icon: this.byIdData.icon,
          //   number: this.byIdData.number,
          //   parent:this.byIdData.parent
          // });
          this.show = false;
        }
      })
    },
    onCancel() {
      this.show = false;
    }
  }
};
</script>

<style lang="scss">
.poptipBox{
  height: 100%;
  float: right;
  line-height: 18px;
  margin-right: 20px;
  // padding: 6px 16px 0;
  cursor: pointer;
  .ivu-poptip{
    padding: 6px 16px 0;
  }
  img{
    display: inline-block;
    width: 28px;
    height: 28px;
    border: 2px solid #fff;
    border-radius: 50%;
    vertical-align: middle;
  }
  .ivu-icon{
    color: #fff;
  }
  &:hover{
    background-color: #f3f1f1;
    img{
      box-shadow: 0 0 4px #333;
    }
    .ivu-icon{
      color: #4d535a;
    }
  }
  .userDetail td {
    color:#333;
    height: 30px;
    line-height: 30px;
    padding: 0.2rem 0.5rem;
    text-align: center;
  }
}
</style>