import {
  makeAjaxUrl,
  forEachToJson,
  timeText
} from "tool/tool.js";
import api from "controller/api/api.js";
const apiInfo = api.basicInformation.org;
export default {
  getData: (state, getters, rootState, rootGetters) => (option) => {
    var ajaxData = {
      "rows": option && option.page_size ? option.page_size : (state.page_size || 50),
      "page": option && option.current ? option.current : (state.current || 1)
    };
    if( state.searchType ){
      forEachToJson(state.searchData, (key, v) => {
        if( v != "" || typeof(v) == "number" ){
          if(key == "uporgname"){
            ajaxData.uporgname = state.searchType ? rootGetters["selectData/findData"]({ name: "uporgname",value: state.searchData.uporgname}) : ""
          }else if(key == "orgtype"){
            ajaxData.orgtype = state.searchType ? rootGetters["selectData/findData"]({ name: "orgtype",value: state.searchData.orgtype}) : ""
          }else if(key == "orgarea"){
            ajaxData.orgarea = state.searchType ? rootGetters["selectData/findData"]({ name: "orgarea",value: state.searchData.orgarea}) : ""
          }else if(key == "creat_date"){
            ajaxData[key] = timeText(v)
          }else{
            ajaxData[key] = v;
          }
        }
      });
    }
    return {
      method: apiInfo.getData.method,
      url: apiInfo.getData.url,
      data:makeAjaxUrl(ajaxData)
    };
  },
  getByIdData: (state, getters, rootState, rootGetters) => (option) => {
    return {
      method: apiInfo.getByIdData.method,
      url: apiInfo.getByIdData.url,
      data: makeAjaxUrl({
        id: option.id
      })
    };
  },
  saveNew: (state, getters, rootState, rootGetters) => (option) => {
    return {
      method: apiInfo.saveNew.method,
      url: apiInfo.saveNew.url,
      data: makeAjaxUrl( {
        orgname: state.byIdData.ORGNAME,
        orgtype: state.byIdData.ORGTYPE,
        areaType: state.byIdData.ORGAREA,
        uporgname: rootGetters["selectData/findData"]({name: "uporgname", value: state.byIdData.UPORGNAME}),
        linkman: state.byIdData.LINKMAN,
        tel: state.byIdData.TEL,
        serve_date: timeText(state.byIdData.CREATE_DATE),
        address: state.byIdData.ADDRESS,
        notes:state.byIdData.NOTES,
      })
    };
  },
  saveEdit: (state, getters, rootState, rootGetters) => (option) => {
    return {
      method: apiInfo.saveEdit.method,
      url: apiInfo.saveEdit.url,
      data: makeAjaxUrl({
        orgid: state.byIdData.ORGID,
        orgname: state.byIdData.ORGNAME,
        orgtype: state.byIdData.ORGTYPE,
        areaType: state.byIdData.ORGAREA,
        uporgname: rootGetters["selectData/findData"]({name: "uporgname", value: state.byIdData.UPORGNAME}),
        linkman: state.byIdData.LINKMAN,
        tel: state.byIdData.TEL,
        serve_date: timeText(state.byIdData.CREATE_DATE),
        address: state.byIdData.ADDRESS,
        notes:state.byIdData.NOTES,
      })
    };
  },
  delete: (state, getters, rootState, rootGetters) => (option) => {
    return {
      method: apiInfo.delete.method,
      url: apiInfo.delete.url,
      data: makeAjaxUrl({
        ids: option.id
      })
    };
  }
};
