<template>
  <div :class="'pageBody' + (pageWait ? ' wait' : '')" id="statisticsorder">
    <div class="layout-page-tool">
      <Button type="warning" @click="upload">
        <Icon type="md-add" /> 导出报表
      </Button>
      <div class="quickSearch"  v-if="showQuickSearch">
        <span class="title">统计开始时间：</span>
        <span class="info">
          <DatePicker  v-model="quickSearchData.startdate" placeholder="统计开始时间" clearable></DatePicker>
        </span>
        <span class="title">统计结束时间：</span>
        <span class="info">
          <DatePicker  v-model="quickSearchData.enddate" placeholder="统计结束时间" clearable></DatePicker>
        </span>
        <Button type="info" @click="search()">
          <Icon type="ios-search" /> 快速查询
        </Button>
      </div>
    </div>
    <div class="layout-page-content">
      <Table
        border
        stripe
        :loading="tableLoading"
        :height="table.height"
        :columns="table.columns"
        :data="tableData"
        :highlight-row="true"
      >
      </Table>
    </div>
    <div class="layout-page-page">
      <Page
        :total="total"
        :current="current"
        :page-size="page_size"
        :page-size-opts="page.page_sizepts"
        @on-change="page_change"
        @on-page-size-change="page_size_change"
        show-sizer
        show-elevator
        show-total
        size="small"
      >
      </Page>
    </div>
    <!-- <popup-upload ref="popupUpload" :option="option" v-on:refresh="refreshTable"></popup-upload> -->
  </div>
</template>
<script>
// import popupUpload from "components/situation/popup-upload";
import api from "controller/api/api.js";
import { getTableHeight, timeText } from "tool/tool.js";
export default {
  name: "statisticsorder",
  data() {
    return {
      showQuickSearch: false,
      delModel: {},
      table: {
        height: 500,
        columns: [
          { type: "index", width: 50, align: "center" },
          { title: "隶属网点", key: "ORGNAME", align: "center" },
          { title: "配送单进口量", key: "IMPORT_VOLUME", align: "center" },
          { title: "配送单出口量", key: "EXPORT_VOLUME", align: "center" }
        ]
      },
      page: {
        page_sizepts: [50, 100, 200]
      },
      option: {
        upLoadUrl: api.statisticalManagement.statisticsorder.fileDown.url,
        pageWait: "statisticsorder/changePageWait",
        text: []
      }
    };
  },
  // components: {
  //   popupUpload
  // },
  computed: {
    tableData() {
      return this.$store.state.statisticsorder.tableData;
    },
    quickSearchData() {
      return this.$store.state.statisticsorder.quickSearchData;
    },
    searchType() {
      return this.$store.state.statisticsorder.searchType;
    },
    tableLoading() {
      return this.$store.state.statisticsorder.tableLoading;
    },
    current() {
      return this.$store.state.statisticsorder.current;
    },
    page_size() {
      return this.$store.state.statisticsorder.page_size;
    },
    total() {
      return this.$store.state.statisticsorder.total;
    },
    pageWait() {
      return this.$store.state.statisticsorder.pageWait;
    }
  },
  activated() {
    if (this.$store.getters["pageTab/pageInTab"]("statisticsorder")) {
      this.$store.dispatch({ type: "statisticsorder/refreshData" });
    }
  },
  mounted() {
    this.$store.commit("statisticsorder/clearSearchData");
    this.showQuickSearch = true;
    this.table.height = getTableHeight();
  },
  methods: {
    page_change(newPage) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "statisticsorder/refreshData",
          current: newPage
        });
      }
    },
    page_size_change(newPageSiae) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "statisticsorder/refreshData",
          current: 1,
          page_size: newPageSiae
        });
      }
    },
    upload() {
      window.open(
        this.option.upLoadUrl +
          "?startdate=" +
          (timeText(this.quickSearchData.startdate) || "") +
          "&enddate=" +
          (timeText(this.quickSearchData.enddate) || "")
      );
    },
    search() {
      this.$store.dispatch({
        type: 'statisticsorder/refreshData',
        searchType: this.quickSearchData.startdate ||  this.quickSearchData.enddate,
        current: 1
      });
    },
    refreshTable() {
      this.$store.dispatch({ type: "statisticsorder/refreshData" });
    },
    // reset1() {
    //   this.$store.commit("statisticsorder/clearSearchData1");
    //   this.$store.dispatch({
    //     type: "statisticsorder/refreshData",
    //     searchType: false,
    //     current: 1
    //   });
    // },
    // reset2() {
    //   this.$store.commit("statisticsorder/clearSearchData2");
    //   this.$store.dispatch({
    //     type: "statisticsorder/refreshData",
    //     searchType: false,
    //     current: 1
    //   });
    // }
  }
};
</script>
