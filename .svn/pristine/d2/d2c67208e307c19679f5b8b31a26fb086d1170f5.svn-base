<template>
  <Modal v-model="showEdit" :mask-closable="!1" draggable :transfer="!1" @on-visible-change="visibleChange" :closable="!popupLoading" :class-name="(id ? 'yellow' : 'green') + (popupLoading ? ' popupLoading' : '')" width="400">
    <p slot="header">
      <Icon type="ios-add-circle-outline" ></Icon>
      <span>添加商品信息</span>
    </p>
    <Form :model="byIdData" :label-width="100" :rules="ruleValidate" ref="editForm">
      <Row>
       <i-col span="24">
          <FormItem label="商品名称：" prop="itemname">
            <i-input v-model="byIdData.itemname" placeholder="请输入商品名称"></i-input>
          </FormItem>
        </i-col>
        </Row>
        <Row>
        <i-col span="24">
          <FormItem label="商品数量：" prop="itemnum">
            <i-input v-model="byIdData.itemnum" placeholder="请输入商品数量" @on-blur="makeNumber">
              <span slot="append">件</span>
            </i-input>
          </FormItem>
        </i-col>
      </Row>
      <Row>
        <i-col span="24">
          <FormItem label="商品重量：" prop="weight">
            <i-input v-model="byIdData.weight" placeholder="请输入商品重量" @on-blur="makeNumber">
              <span slot="append">kg</span>
            </i-input>
          </FormItem>
        </i-col>
      </Row>
    </Form>
    <div slot="footer">
      <Button type="success" @click="onOk" :loading="popupLoading">保存</Button>
      <Button type="error" @click="onCancel" :loading="popupLoading">关闭</Button>
    </div>
  </Modal>
</template>
<script>
import { eltValidators } from "tool/eltValidators.js";
export default {
  data() {
    return {
      id: false,
      ruleValidate: {
        itemname: [{ required: true, message: "请填写商品名称！" }],
        itemnum: [
          { required: true, message: "请填写商品数量！" },
          { validator: eltValidators, rules: [{ name: "integer_p", message: "", info: "" }]}
        ],
        weight: [
          { required: true, message: "请填写商品重量！" },
          { validator: eltValidators, rules: [{ name: "maxToValue", message: "", info: "0" }]}
        ],
      }
    };
  },
  computed: {
    byIdData() {
      return this.$store.state.orderlogistics.byIdData;
    },
    showEdit: {
      get: function() {
        return this.$store.state.orderlogistics.showEdit;
      },
      set: function(val) {
        this.$store.commit("orderlogistics/changeShowEdit", val);
      }
    },
    popupLoading() {
      return this.$store.state.orderlogistics.popupLoading;
    }
  },
  mounted() {
  },
  methods: {
    makeNumber(){
      this.byIdData.itemnum = parseFloat(this.byIdData.itemnum) || 0;
      this.byIdData.weight = parseFloat(this.byIdData.weight) || 0;
    },
    open() {
      this.$store.commit("orderlogistics/newAddTable");
      this.result();
      this.$store.commit("orderlogistics/changeShowEdit", true);
    },
    result() {
      this.$refs["editForm"].resetFields();
    },
    onOk() {
      this.$refs["editForm"].validate(valid => {
        if (valid) {
          this.$store.dispatch("orderlogistics/saveData2");
        }
      });
    },
    onCancel() {
      this.$store.commit("orderlogistics/changeShowEdit", false);
    },
    visibleChange(val) {
      this.$store.commit("orderlogistics/changePageWait", val);
    }
  }
};
</script>
