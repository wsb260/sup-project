<template>
  <div :class="'pageBody' + (pageWait ? ' wait' : '')" id="servicestatistics">
    <div class="layout-page-tool">
     <Row>
        <i-col span="2" style="margin-top:5px;">
          <Button type="warning" @click="upload">
            <Icon type="md-add" /> 导出报表
          </Button>
        </i-col>
        <i-col span="5" style="margin-bottom:-10px;">
          <Form  :label-width="90" ref="editForm" class="forms">
           <FormItem label="营运统计">
            <Select  placeholder="请选择统计方式" @on-change="changeMonth">
              <Option v-for="item in LEVEL" :value="item.value" :key="item.value">{{item.label}}</Option>
            </Select>
          </FormItem>
          </Form>
        </i-col>
        <i-col span="4"  style="margin-bottom:-10px;" >
          <Form :model="searchData" :label-width="5" ref="editForm" class="forms">
            <FormItem label="">
              <DatePicker :type="date" v-model="searchData.senddate" clearable @on-clear="reset()"></DatePicker>
            </FormItem>
          </Form>
        </i-col>
        <i-col span="4" style="margin-top:2px">
          <Button type="info" @click="search()">
            <Icon type="ios-search" /> 快速查询
          </Button>
        </i-col>
      </Row>
    </div>
    <div class="layout-page-content">
      <Table
        border
        stripe
        :loading="tableLoading"
        :height="table.height"
        :columns="table.columns"
        :data="tableData"
        :highlight-row="true"
      >
      </Table>
    </div>
    <div class="layout-page-page">
      <Page
        :total="total"
        :current="current"
        :page-size="page_size"
        :page-size-opts="page.page_sizepts"
        @on-change="page_change"
        @on-page-size-change="page_size_change"
        show-sizer
        show-elevator
        show-total
        size="small"
      >
      </Page>
    </div>
  </div>
</template>
<script>
import api from "controller/api/api.js";
import { getTableHeight,timeText } from "tool/tool.js";
export default {
  name: "servicestatistics",
  data() {
    return {
      date:"date",
      LEVEL: [
        {value:"10",label:"日营运统计"},
        {value:"20",label:"月营运统计"}
      ],
      table: {
        height: 500,
        columns: [
          { type: "index", width: 50, align: "center" },
          { title: "订单号", key: "ORDERNO", align: "center" },
          { title: "订单流向", key: "UPANDDOWNSTATUS", align: "center" },
          { title: "代收款金额", key: "COLLECTPRICE", align: "center" },
          { title: "应收费用", key: "ITEMSVALUE", align: "center" },
          { title: "运输费用", key: "FREIGHT", align: "center" },
          { title: "总费用", key: "TOTALFEE", align: "center" },
          { title: "支付方式", key: "PAYWAY", align: "center" },
        ]
      },
      page: {
        page_sizepts: [50, 100, 200]
      },
       option: {
        upLoadUrl: api.statisticalManagement.servicestatistics.fileUpLoad.url,
        pageWait: "servicestatistics/changePageWait",
        text: []
      }
    };
  },
  components: {
  },
  computed: {
    tableData() {
      return this.$store.state.servicestatistics.tableData;
    },
    tableLoading() {
      return this.$store.state.servicestatistics.tableLoading;
    },
     searchData() {
      return this.$store.state.servicestatistics.searchData;
    },
    current() {
      return this.$store.state.servicestatistics.current;
    },
    page_size() {
      return this.$store.state.servicestatistics.page_size;
    },
    total() {
      return this.$store.state.servicestatistics.total;
    },
    pageWait() {
      return this.$store.state.servicestatistics.pageWait;
    }
  },
  activated() {
    if (this.$store.getters["pageTab/pageInTab"]("servicestatistics")) {
      this.refreshTable();
      this.$store.dispatch({ type: "servicestatistics/refreshData" });
    }
  },
  mounted() {
    this.table.height = getTableHeight();
  },
  methods: {
    page_change(newPage) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "servicestatistics/refreshData",
          current: newPage
        });
      }
    },
    page_size_change(newPageSiae) {
      if (!this.tableLoading) {
        this.$store.dispatch({
          type: "servicestatistics/refreshData",
          current: 1,
          page_size: newPageSiae
        });
      }
    },
    upload() {
      window.open(this.option.upLoadUrl + "?senddate=" + ( timeText(this.searchData.senddate) || "" ));
    },
    search() {
      this.$store.dispatch({
        type: "servicestatistics/getData2",
        searchType: true,
        current: 1
      });
    },
    refreshTable() {
      this.$store.dispatch({ type: "servicestatistics/refreshData" });
    },
    changeMonth(value){
     this.date = (value == "10" ? "date" : "month");
    },
    reset() {
      this.$store.commit("servicestatistics/clearSearchData");
      this.$store.dispatch({
        type: "servicestatistics/refreshData",
        searchType: false,
        current: 1
      });
    }
  }
};
</script>

<style>
</style>
